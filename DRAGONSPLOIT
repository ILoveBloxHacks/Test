runFunction(function()
	local ProjectileAura = {Enabled = false}
	local ProjectileAuraRange = {Value = 40}
	local lastTarget

	local function shootProjectile(item, ammotypething)
		local plr = EntityNearPosition(ProjectileAuraRange.Value)
		if queueType == "winter_event" and entityLibrary.isAlive then 
			local boss = workspace:FindFirstChild("WinterEventBoss")
			if boss and (boss.PrimaryPart.Position - entityLibrary.character.HumanoidRootPart.Position).Magnitude < 300 then 
				plr = {RootPart = boss.PrimaryPart, Player = {Name = "", UserId = 99999999}, Character = workspace}
			end
		end
		lastTarget = plr
		if plr then
			switchItem(item.tool)
			local rayparams = RaycastParams.new()
			local tab = {lplr.Character}
			for i,v in pairs(entityLibrary.entityList) do if v.Targetable then table.insert(tab, v.Character) end end
			rayparams.FilterDescendantsInstances = tab
			local rayCheckPos = CFrame.new(entityLibrary.character.HumanoidRootPart.Position, plr.RootPart.Position)
			if bedwars.QueryUtil:raycast(rayCheckPos.p, plr.RootPart.Position - rayCheckPos.p, rayparams) then return end
			local projsource = bedwars.ItemTable[item.itemType].projectileSource
			local ammo = projsource.projectileType(ammotypething)	
			local projmeta = bedwars.ProjectileMeta[ammo]
			local startPos = entityLibrary.character.HumanoidRootPart.Position
			local offsetStartPos = startPos + Vector3.new(0, 2, 0)
			local prediction = (worldmeta and projmeta.predictionLifetimeSec or projmeta.lifetimeSec or 3)
			local launchvelo = (projmeta.launchVelocity or 100)
			local gravity = (projmeta.gravitationalAcceleration or 196.2)
			local multigrav = gravity
			local pos = plr.RootPart.Position
			local playergrav = workspace.Gravity
			if plr.Character.PrimaryPart:FindFirstChild("rbxassetid://8200754399") then 
				playergrav = (workspace.Gravity * 0.3)
			end
			local shootpos, shootvelo = predictGravity(pos, plr.Character.HumanoidRootPart.Velocity, (pos - offsetStartPos).Magnitude / launchvelo, plr, playergrav)
			if projmeta.projectile == "telepearl" then
				shootpos = pos
				shootvelo = Vector3.zero
			end
			local newlook = CFrame.new(offsetStartPos, shootpos) * CFrame.new(Vector3.new(-bedwars.BowConstantsTable.RelX, -bedwars.BowConstantsTable.RelY, -bedwars.BowConstantsTable.RelZ))
			shootpos = newlook.p + (newlook.lookVector * (offsetStartPos - shootpos).magnitude)
			local calculated = LaunchDirection(offsetStartPos, shootpos, launchvelo, multigrav, false)
			if calculated then 
				local guid = game:GetService("HttpService"):GenerateGUID()
				bedwars.ProjectileController:createLocalProjectile(tab, ammotypething, ammo, offsetStartPos, guid, calculated, {drawDurationSeconds = 1})
				bedwars.ClientHandler:Get(bedwars.ProjectileRemote):CallServerAsync(item.tool, ammotypething, ammo, offsetStartPos, startPos, calculated, guid, {drawDurationSeconds = 1}, workspace:GetServerTimeNow() - 0.045)
				task.wait(projsource.fireDelaySec)
			end
		end
	end

	ProjectileAura = GuiLibrary.ObjectsThatCanBeSaved.MatrixWareWindow.Api.CreateOptionsButton({
        Name = "ProjectileAura",
        Function = function(callback)
			if callback then 
				task.spawn(function()
					repeat
						task.wait(.1)
						if GuiLibrary.ObjectsThatCanBeSaved["Lobby CheckToggle"].Api.Enabled then 
							if bedwarsStore.matchState == 0 then continue end
						end
						if entityLibrary.isAlive then
							local bow = getItemNear("wood_bow")
							if bow and ProjNormalBow.Enabled and getItem("arrow") then
								shootProjectile(bow, "arrow")
								lastTarget = nil
							end
						else
							lastTarget = nil
						end
						task.wait(.1)
					until (not ProjectileAura.Enabled)
				end)

				task.spawn(function()
					repeat
						task.wait(.2)
						if GuiLibrary.ObjectsThatCanBeSaved["Lobby CheckToggle"].Api.Enabled then 
							if bedwarsStore.matchState == 0 then continue end
						end
						if entityLibrary.isAlive then
							local crossbow = getItemNear("wood_crossbow")
							if crossbow and ProjCrossbow.Enabled and getItem("arrow") then
								shootProjectile(crossbow, "arrow")
								lastTarget = nil
							end
						else
							lastTarget = nil
						end
						task.wait(.2)
					until (not ProjectileAura.Enabled)
				end)

				task.spawn(function()
					repeat
						task.wait(.35)
						if GuiLibrary.ObjectsThatCanBeSaved["Lobby CheckToggle"].Api.Enabled then 
							if bedwarsStore.matchState == 0 then continue end
						end
						if entityLibrary.isAlive then
							local taccrossbow = getItemNear("tactical_crossbow")
							if taccrossbow and ProjTacCrossbow.Enabled and getItem("arrow") then
								shootProjectile(taccrossbow, "arrow")
								lastTarget = nil
							end
						else
							lastTarget = nil
						end
						task.wait(.35)
					until (not ProjectileAura.Enabled)
				end)

				task.spawn(function()
					repeat
						task.wait(.45)
						if GuiLibrary.ObjectsThatCanBeSaved["Lobby CheckToggle"].Api.Enabled then 
							if bedwarsStore.matchState == 0 then continue end
						end
						if entityLibrary.isAlive then
							local snowball = getItemNear("snowball")
							if snowball and ProjSnowball.Enabled then
								shootProjectile(snowball, "snowball")
								lastTarget = nil
							end
						else
							lastTarget = nil
						end
						task.wait(.45)
					until (not ProjectileAura.Enabled)
				end)

				task.spawn(function()
					repeat
						vapeTargetInfo.Targets.ProjectileAura = lastTarget and {
							Humanoid = {
								Health = (lastTarget.Character:GetAttribute("Health") or lastTarget.Humanoid.Health) + getShieldAttribute(lastTarget.Character),
								MaxHealth = lastTarget.Character:GetAttribute("MaxHealth") or lastTarget.Humanoid.MaxHealth
							},
							Player = lastTarget.Player
						}
						task.wait()
					until (not ProjectileAura.Enabled)
				end)
			else
				vapeTargetInfo.Targets.ProjectileAura = nil
			end
		end
	})
	ProjectileAuraRange = ProjectileAura.CreateSlider({
		Name = "Range",
		Function = function() end,
		Min = 1,
		Max = 50,
		Default = 50
	})
	ProjNormalBow = ProjectileAura.CreateToggle({
		Name = "Bow",
		HoverText = "Shoots bow aura",
		Function = function() end,
		Default = true
	})
	ProjCrossbow = ProjectileAura.CreateToggle({
		Name = "Crossbow",
		HoverText = "Shoots crossbow aura",
		Function = function() end,
		Default = true
	})
	ProjTacCrossbow = ProjectileAura.CreateToggle({
		Name = "Tactical Bow",
		HoverText = "Shoots Tactical Bow aura",
		Function = function() end,
		Default = true
	})
	ProjSnowball = ProjectileAura.CreateToggle({
		Name = "Snowball",
		HoverText = "Shoots snowball aura",
		Function = function() end,
		Default = true
	})
end)runFunction(function()
			local ArmorColoring = {Enabled = false}
			local armorcolorboots = {Enabled = false}
			local armorcolorchestplate = {Enabled = false}
			local armorcolorhelmet = {Enabled = false}
			local armorcolorneon = {Enabled = false}
			local armorcolor = {Hue = 0, Sat = 0, Value = 0}
			local oldarmortextures = {}
			local transformedobjects = {}
			local function isArmor(tool) return armorcolorhelmet.Enabled and tool.Name:find("_helmet") or armorcolorchestplate.Enabled and tool.Name:find("_chestplate") or armorcolorboots.Enabled and tool.Name:find("_boots") or nil end
			local function refresharmor()
				local suc = pcall(function()
					for i,v in pairs(lplr.Character:GetChildren()) do
						if v:IsA("Accessory") and v:GetAttribute("ArmorSlot") and isArmor(v) then
							local handle = v:FindFirstChild("Handle")
							if not handle then continue end
							if oldarmortextures[v] == nil then oldarmortextures[v] = handle.TextureID end
							handle.TextureID = ""
							handle.Color = Color3.fromHSV(armorcolor.Hue, armorcolor.Sat, armorcolor.Value)
							handle.Material = armorcolorneon.Enabled and Enum.Material.Neon or Enum.Material.SmoothPlastic
							table.insert(transformedobjects, handle)
						end 
					end
				end)
				return suc
			end
			ArmorColoring = GuiLibrary.ObjectsThatCanBeSaved.RenderWindow.Api.CreateOptionsButton({
				Name = "ArmorColoring",
				HoverText = "Add some glow up to your armor.",
				Function = function(callback)
					if callback then
						task.spawn(function()
							if not isAlive() then repeat task.wait() until isAlive() end
							task.spawn(refresharmor)
							table.insert(ArmorColoring.Connections, lplr.CharacterAdded:Connect(function()
								if not isAlive() then repeat task.wait() until isAlive() end
								ArmorColoring.ToggleButton(false)
								ArmorColoring.ToggleButton(false)
							end))
							table.insert(ArmorColoring.Connections, lplr.Character.ChildAdded:Connect(function(v)
								if v:IsA("Accessory") and v:GetAttribute("ArmorSlot") and isArmor(v) then
									refresharmor()
								end
							end))
						end)
					else
						for i,v in pairs(transformedobjects) do
							if v.Parent and oldarmortextures[v.Parent] then
								pcall(function() v.TextureID = oldarmortextures[v.Parent] end)
								v = nil
							end
						end
					end
				end
			})
			armorcolor = ArmorColoring.CreateColorSlider({
				Name = "Color",
				Function = function()
					if ArmorColoring.Enabled then
						refresharmor()
					end
				end
			})
			armorcolorneon = ArmorColoring.CreateToggle({
				Name = "Neon",
				Function = function()
				if ArmorColoring.Enabled then
					ArmorColoring.ToggleButton(false)
					ArmorColoring.ToggleButton(false)
				end
			    end
			})
			armorcolorhelmet = ArmorColoring.CreateToggle({
				Name = "Helmet",
				Function = function()
				if ArmorColoring.Enabled then
					ArmorColoring.ToggleButton(false)
					ArmorColoring.ToggleButton(false)
				end
			    end
			})
			armorcolorchestplate = ArmorColoring.CreateToggle({
				Name = "Chestplate",
				Function = function()
				if ArmorColoring.Enabled then
					ArmorColoring.ToggleButton(false)
					ArmorColoring.ToggleButton(false)
				end
			    end
			})
			armorcolorboots = ArmorColoring.CreateToggle({
				Name = "Boots",
				Default = true,
				Function = function()
				if ArmorColoring.Enabled then
					ArmorColoring.ToggleButton(false)
					ArmorColoring.ToggleButton(false)
				end
			    end
			})
		end)
runcode(function()
	FpsDisplay = GuiLibrary["ObjectsThatCanBeSaved"]["RenderWindow"]["Api"].CreateOptionsButton({
		["Name"] = "FpsDisplay",
		["HoverText"] = "Grass gave me this so dont hate if skidded :sob:",
		["Function"] = function(callback)
			if callback then
				local textlab = Instance.new("TextLabel")
				textlab.Size = UDim2.new(0, 200, 0, 28)
				textlab.BackgroundTransparency = 1
				textlab.TextColor3 = Color3.new(1, 1, 1)
				textlab.TextStrokeTransparency = 0
				textlab.TextStrokeColor3 = Color3.new(0.24, 0.24, 0.24)
				textlab.Font = Enum.Font.SourceSans
				textlab.TextSize = 28
				textlab.Text = "1 FPS"
				textlab.BackgroundColor3 = Color3.new(0, 0, 0)
				textlab.Position = UDim2.new(1, -254, 0, -10)
				textlab.TextXAlignment = Enum.TextXAlignment.Right
				textlab.BorderSizePixel = 0
				textlab.Parent = game.CoreGui.RobloxGui
				spawn(function()
					local RunService = game:GetService("RunService")
					local FpsLabel = textlab
					
					local TimeFunction = RunService:IsRunning() and time or os.clock
					
					local LastIteration, Start
					local FrameUpdateTable = {}
					
					local function loopupdate()
						LastIteration = TimeFunction()
						for Index = #FrameUpdateTable, 1, -1 do
							FrameUpdateTable[Index + 1] = FrameUpdateTable[Index] >= LastIteration - 1 and FrameUpdateTable[Index] or nil
						end
					
						FrameUpdateTable[1] = LastIteration
						FpsLabel.Text = tostring(math.floor(TimeFunction() - Start >= 1 and #FrameUpdateTable or #FrameUpdateTable / (TimeFunction() - Start))) .. " FPS"
					end
					
					Start = TimeFunction()
					RunService.Heartbeat:Connect(loopupdate)
				end)
			else
				pcall(function()
					textlab:Remove()
				end)
			end
		end
	})
end) runFunction(function()
			local cameraunlock = {Enabled = false}
			local cameraunlockdistance = {Value = 14}
			local oldzoomdistance = 14
			cameraunlock = GuiLibrary.ObjectsThatCanBeSaved.RenderWindow.Api.CreateOptionsButton({
				Name = "InfiniteCamera",
				HoverText = "Unlock your camera's zoom distance.",
				Function = function(callback)
					if callback then
						task.spawn(function()
							local camera, attribute = pcall(function() return lplr.CameraMaxZoomDistance end)
							if not camera then repeat camera, attribute = pcall(function() return lplr.CameraMaxZoomDistance end) task.wait() until camera end
							oldzoomdistance = attribute
							lplr.CameraMaxZoomDistance = cameraunlockdistance.Value
						end)
					else
						pcall(function() lplr.CameraMaxZoomDistance = oldzoomdistance end)
					end
				end
			})
			oldzoomdistance = cameraunlock.CreateSlider({
				Name = "Zoom-Out Distance",
				Min = 14,
				Max = 1000,
				Function = function(callback) 
					if cameraunlock.Enabled then
					pcall(function() lplr.CameraMaxZoomDistance = callback end) 
					end
				end
			})
		end)runFunction(function()
                pcall(GuiLibrary.RemoveObject, "InfiniteJumpOptionsButton")
				local InfiniteJump = {Enabled = false}
				local InfiniteJumpMode = {Value = "Hold"}
				InfiniteJump = GuiLibrary.ObjectsThatCanBeSaved.BlatantWindow.Api.CreateOptionsButton({
					Name = "InfiniteJump",
					HoverText = "Jump freely with no limitations (maybe not with anti-cheat :omegalol:).",
					Function = function(callback)
						if callback then
							task.spawn(function()
								table.insert(InfiniteJump.Connections, inputService.JumpRequest:Connect(function()
								if InfiniteJumpMode.Value == "Hold" then
									if isAlive(lplr) and isnetworkowner(lplr.Character.HumanoidRootPart) then
								      lplr.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
									  local raycast = workspace:Raycast(lplr.Character.PrimaryPart.Position, Vector3.new(0, -2000, 0), bedwarsStore.blockRaycast)
		                              raycast = raycast and GetMagnitudeOf2Objects(lplr.Character.HumanoidRootPart, raycast) or nil
									  NebulawareStore.jumpTick = tick() + (raycast and raycast / 35 or 4.5)
								    end
								end
							end))
							table.insert(InfiniteJump.Connections, inputService.InputBegan:Connect(function(input)
								if InfiniteJumpMode.Value == "Single" and input.KeyCode == Enum.KeyCode.Space and not inputService:GetFocusedTextBox() then
									if isAlive(lplr) and isnetworkowner(lplr.Character.HumanoidRootPart) then
									lplr.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
									local raycast = workspace:Raycast(lplr.Character.PrimaryPart.Position, Vector3.new(0, -2000, 0), bedwarsStore.blockRaycast)
		                            raycast = raycast and GetMagnitudeOf2Objects(lplr.Character.HumanoidRootPart, raycast) or nil
									NebulawareStore.jumpTick = tick() + (raycast and raycast / 35 or 1)
									end
								end
							end))
						end)
					  end
				   end
				})
				if not NebulawareStore.MobileInUse then
				InfiniteJumpMode = InfiniteJump.CreateDropdown({
					Name = "Mode",
					List = {"Single", "Hold"},
					Function = function() end
				})
			end
			end)
