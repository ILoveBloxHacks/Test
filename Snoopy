pcall(function()
		Ignoreplaceregions = GuiLibrary["ObjectsThatCanBeSaved"]["UtilityWindow"]["Api"].CreateOptionsButton({
			["Name"] = "IgnorePlaceRegions",
			["Function"] = function(callback)
				if callback then

				else


				end
			end
		})

		AnticheatDisabler = GuiLibrary["ObjectsThatCanBeSaved"]["UtilityWindow"]["Api"].CreateOptionsButton({
			["Name"] = "AnticheatDisabler",
			["HoverText"] = "Requires a glider",
			["Function"] = function(callback)
				if callback then
					pcall(function()
						game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.HangGliderUse:FireServer()
						createwarning("Vape","Anticheat Disabled",10)
						AnticheatDisabler["ToggleButton"](false)
						task.wait(1)
						for i,v in pairs(game:GetService("Workspace").Gliders:GetChildren()) do
							v:Remove()
						end
					end)
				else

				end
			end
		})
		local ColorLoop = nil
		RBGSword = GuiLibrary["ObjectsThatCanBeSaved"]["UtilityWindow"]["Api"].CreateOptionsButton({
			["Name"] = "RBGSword",
			["HoverText"] = "gay sword",
			["Function"] = function(callback)
				if callback then
					local ColorLoop = nil
					for i,v in pairs(game:GetService("Workspace").Camera:GetDescendants()) do
						if v.Name == "Handle" then
							v.TextureID = ""
							v.Material = Enum.Material.Neon
							v.Transparency = 0
							ColorLoop = true
							repeat task.wait()
								if  lplr.Character.Humanoid.Health ~= 0 then
									v.Color = Color3.fromRGB(22, 185, 63)
									wait(0.1)
									v.Color = Color3.fromRGB(44, 255, 237)
									wait(0.1)
									v.Color = Color3.fromRGB(38, 42, 255)
									wait(0.1)
									v.Color = Color3.fromRGB(240, 34, 255)
									wait(0.1)
									v.Color = Color3.fromRGB(220, 20, 23)
									wait(0.1)
									v.Color = Color3.fromRGB(226, 108, 29)
									wait(0.1)
									v.Color = Color3.fromRGB(255, 247, 12)
								end
							until not ColorLoop
						end
					end
				else
					ColorLoop = false
					game.Workspace.Camera.Viewmodel.wood_sword.Handle.Transparency = 0
					game.Workspace.Camera.Viewmodel.wood_sword.Handle.TextureID = "rbxassetid://6770060739"
				end
			end
		})
		PickupAll = GuiLibrary["ObjectsThatCanBeSaved"]["UtilityWindow"]["Api"].CreateOptionsButton({
			["Name"] = "PickupIron",
			["HoverText"] = "Requires Anticheat Disabler",
			["Function"] = function(callback)
				if callback then
					local cpos = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
					for i,v in pairs(game:GetService("Workspace").ItemDrops:GetChildren()) do
						game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
						game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,2,0)
					end
					game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = cpos
					PickupAll["ToggleButton"](false)
				else


				end
			end
		})
		
		local KnitClient = debug.getupvalue(require(game.Players.LocalPlayer.PlayerScripts.TS.knit).setup, 6)
		KnitClient.Controllers.MapController.denyRegions = {}
		local place = game:GetService("UserInputService").InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 and Ignoreplaceregions["Enabled"] then
				local Position = game.Players.LocalPlayer:GetMouse().Hit
				local NewPosition = {
					X = math.round((Position.X/3)),
					Y = math.round((Position.Y/3)),
					Z = math.round((Position.Z/3)),
				}
				for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
					if v:IsA("Accessory") and v:FindFirstChild("Handle") and v.Handle:FindFirstChild("Left") then
						local args = {
							[1] = {
								["position"] = Vector3.new(NewPosition.X, NewPosition.Y, NewPosition.Z),
								["blockType"] = v.Name
							}
						}

						game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.PlaceBlock:InvokeServer(unpack(args))
						break
					end
				end
			end
		end)
	end)
